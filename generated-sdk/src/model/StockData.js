/**
 * 測試用-Swagger UI 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: skyi989@ymail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StockData model module.
 * @module model/StockData
 * @version 1.0
 */
class StockData {
    /**
     * Constructs a new <code>StockData</code>.
     * @alias module:model/StockData
     */
    constructor() { 
        
        StockData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StockData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StockData} obj Optional instance to populate.
     * @return {module:model/StockData} The populated <code>StockData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StockData();

            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tradeVolume')) {
                obj['tradeVolume'] = ApiClient.convertToType(data['tradeVolume'], 'String');
            }
            if (data.hasOwnProperty('tradeValue')) {
                obj['tradeValue'] = ApiClient.convertToType(data['tradeValue'], 'String');
            }
            if (data.hasOwnProperty('openingPrice')) {
                obj['openingPrice'] = ApiClient.convertToType(data['openingPrice'], 'String');
            }
            if (data.hasOwnProperty('highestPrice')) {
                obj['highestPrice'] = ApiClient.convertToType(data['highestPrice'], 'String');
            }
            if (data.hasOwnProperty('lowestPrice')) {
                obj['lowestPrice'] = ApiClient.convertToType(data['lowestPrice'], 'String');
            }
            if (data.hasOwnProperty('closingPrice')) {
                obj['closingPrice'] = ApiClient.convertToType(data['closingPrice'], 'String');
            }
            if (data.hasOwnProperty('change')) {
                obj['change'] = ApiClient.convertToType(data['change'], 'String');
            }
            if (data.hasOwnProperty('transaction')) {
                obj['transaction'] = ApiClient.convertToType(data['transaction'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StockData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StockData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tradeVolume'] && !(typeof data['tradeVolume'] === 'string' || data['tradeVolume'] instanceof String)) {
            throw new Error("Expected the field `tradeVolume` to be a primitive type in the JSON string but got " + data['tradeVolume']);
        }
        // ensure the json data is a string
        if (data['tradeValue'] && !(typeof data['tradeValue'] === 'string' || data['tradeValue'] instanceof String)) {
            throw new Error("Expected the field `tradeValue` to be a primitive type in the JSON string but got " + data['tradeValue']);
        }
        // ensure the json data is a string
        if (data['openingPrice'] && !(typeof data['openingPrice'] === 'string' || data['openingPrice'] instanceof String)) {
            throw new Error("Expected the field `openingPrice` to be a primitive type in the JSON string but got " + data['openingPrice']);
        }
        // ensure the json data is a string
        if (data['highestPrice'] && !(typeof data['highestPrice'] === 'string' || data['highestPrice'] instanceof String)) {
            throw new Error("Expected the field `highestPrice` to be a primitive type in the JSON string but got " + data['highestPrice']);
        }
        // ensure the json data is a string
        if (data['lowestPrice'] && !(typeof data['lowestPrice'] === 'string' || data['lowestPrice'] instanceof String)) {
            throw new Error("Expected the field `lowestPrice` to be a primitive type in the JSON string but got " + data['lowestPrice']);
        }
        // ensure the json data is a string
        if (data['closingPrice'] && !(typeof data['closingPrice'] === 'string' || data['closingPrice'] instanceof String)) {
            throw new Error("Expected the field `closingPrice` to be a primitive type in the JSON string but got " + data['closingPrice']);
        }
        // ensure the json data is a string
        if (data['change'] && !(typeof data['change'] === 'string' || data['change'] instanceof String)) {
            throw new Error("Expected the field `change` to be a primitive type in the JSON string but got " + data['change']);
        }
        // ensure the json data is a string
        if (data['transaction'] && !(typeof data['transaction'] === 'string' || data['transaction'] instanceof String)) {
            throw new Error("Expected the field `transaction` to be a primitive type in the JSON string but got " + data['transaction']);
        }

        return true;
    }


}



/**
 * @member {Date} date
 */
StockData.prototype['date'] = undefined;

/**
 * @member {String} code
 */
StockData.prototype['code'] = undefined;

/**
 * @member {String} name
 */
StockData.prototype['name'] = undefined;

/**
 * @member {String} tradeVolume
 */
StockData.prototype['tradeVolume'] = undefined;

/**
 * @member {String} tradeValue
 */
StockData.prototype['tradeValue'] = undefined;

/**
 * @member {String} openingPrice
 */
StockData.prototype['openingPrice'] = undefined;

/**
 * @member {String} highestPrice
 */
StockData.prototype['highestPrice'] = undefined;

/**
 * @member {String} lowestPrice
 */
StockData.prototype['lowestPrice'] = undefined;

/**
 * @member {String} closingPrice
 */
StockData.prototype['closingPrice'] = undefined;

/**
 * @member {String} change
 */
StockData.prototype['change'] = undefined;

/**
 * @member {String} transaction
 */
StockData.prototype['transaction'] = undefined;






export default StockData;

